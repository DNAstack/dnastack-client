timeout: 7200s

steps:
  - id: setup
    name: 'gcr.io/cloud-builders/gcloud@sha256:b50f18d45d6711dd2f6e81daf66e30c2ea5df8d40e40116e91c2aa25c8e92162'
    entrypoint: 'bash'
    args:
      - '-e'
      - '-c'
      # language=bash
      - |
        gcloud secrets versions access latest \
          --secret=cli-test-env-default \
          --project=cloud-builld-webhook \
          --out-file=/root/.env

        # Your current directory is a workspace.
        gcloud auth list
        gsutil cp gs://dnastack-ci-content/bootstrap-workspace.tar.gz /tmp
        cd /tmp
        tar xzf bootstrap-workspace.tar.gz

        gcloud kms decrypt --ciphertext-file=.ssh/github_rsa_key.enc --plaintext-file=.ssh/id_rsa --location=global --keyring=cloud-build-webhook --key=secret_key
        cp -r .ssh /root/
        rm -r .ssh
        chmod 700 /root/.ssh
        chmod 600 /root/.ssh/id_rsa

        # Decrypt the pypirc
        gcloud kms decrypt --ciphertext-file=.pypirc.enc --plaintext-file=.pypirc --location=global --keyring=cloud-build-webhook --key=secret_key
        cp .pypirc /root/
        rm .pypirc
        chmod 600 /root/.pypirc

        # Specific setup for the CLI tool
        cd dnastack-client-library

        # Decrypt github (required for deploying to github releases)
        gcloud kms decrypt --ciphertext-file=github.enc --plaintext-file=github --location=global --keyring=cloud-build-webhook --key=secret_key
        cp github /root/
        rm github
        chmod 600 /root/github

        cd ../..
        rm -rf /tmp
    volumes:
      - name: 'homedir'
        path: /root
  # End

  # Build the package
  - id: build-package
    name: python:3.11-slim@sha256:e9f0a08f0d1bfbe10dbdaef481acda96ceac20c9755ad58343de1fcd45fce23a
    entrypoint: bash
    args:
      - '-ec'
      # language=bash
      - |
        apt update --quiet && apt install -qqy git curl

        git config --global --add safe.directory /workspace

        # Install uv
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="/root/.local/bin:$PATH"

        # Build using uv
        uv build

        # Pre-release
        #./scripts/build-package.py --pre-release a  # a=alpha, b=beta, rc=release-candidate
    volumes:
      - name: 'homedir'
        path: /root
  # End

  # Perform the sanity check for the CLI
  # NOTE: This is to ensure that the CLI works with the minimum requirements.
  - id: sanity-check
    name: python:3.11-slim@sha256:e9f0a08f0d1bfbe10dbdaef481acda96ceac20c9755ad58343de1fcd45fce23a
    entrypoint: bash
    args:
      - '-ec'
      # language=bash
      - |
        cp dist/*.whl /tmp
        cd /tmp
        pip install *.whl
        dnastack use --no-auth viral.ai
  # End

  # Test with the latest stable release of Python.
  - id: python-3.12
    name: python:3.12-slim@sha256:744a20876a5eb3cfb2b21c62f1755e286da9af3715ad92179f1f78e853f00bee
    entrypoint: bash
    args:
      - '-ec'
      # language=bash
      - |
        export E2E_ENV_FILE=/root/.env
        ./scripts/run-e2e-tests-in-container.sh -fv tests/e2e_tests/cli/test_*
    volumes:
      - name: 'homedir'
        path: /root
  # End

  # Publish the package
  - id: publish-package
    name: python:3.11-slim@sha256:e9f0a08f0d1bfbe10dbdaef481acda96ceac20c9755ad58343de1fcd45fce23a
    entrypoint: bash
    args:
      - '-ec'
      # language=bash
      - |
        apt update --quiet && apt install -qqy curl

        # Install uv
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="/root/.local/bin:$PATH"

        cp /root/.pypirc ~/.pypirc
        uv publish --verbose dist/*.whl
    volumes:
      - name: 'homedir'
        path: /root
  # End
