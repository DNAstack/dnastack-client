[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dnastack-client-library"
version = "3.1.0a0"
description = "DNAstack's GA4GH library and CLI"
readme = {text = "GA4GH API client and command line tool. Please check out [the documentation](https://docs.omics.ai/products/analysis/python-library) for more details.", content-type = "text/markdown"}
license = {text = "Apache License, Version 2.0"}
authors = [
    {name = "DNAstack", email = "devs@dnastack.com"}
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "click>=8.0.3,<8.2",
    "pydantic>=1.9.0,<2",
    "pyjwt>=2.1.0,<3",
    "pyyaml>=5.4.1",
    "requests>=2.23.0,<3",
    "urllib3>=1.25.11,<2",
    "kotoba",
    "imagination>=3.3.1",
    "requests-toolbelt>=0.9.1,<1",
    "httpie>=3.2.1",
    "beautifulsoup4>=4.10.0",
    "python-dotenv"
]

[project.urls]
Homepage = "https://www.dnastack.com"
Repository = "https://github.com/DNAstack/dnastack-client-library"
Documentation = "https://docs.omics.ai/products/analysis/python-library"
Issues = "https://github.com/DNAstack/dnastack-client-library/issues"

[project.scripts]
dnastack = "dnastack.__main__:dnastack"
omics = "dnastack.omics_cli:omics"

[project.optional-dependencies]
flask = ["flask~=2.1"]
gcp = [
    "google-cloud-secret-manager",
    "google-crc32c"
]
data = ["pandas"]
browser = ["selenium>=4.1.0"]
test-legacy = [
    "selenium>=3.141.0",
    "pyjwt>=2.1.0",
    "jsonpath-ng>=1.5.3"
]
all = [
    "flask~=2.1",
    "google-cloud-secret-manager",
    "google-crc32c",
    "pandas",
    "selenium>=4.1.0"
]

[dependency-groups]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "pytest-watch>=4.2.0",
    "responses>=0.23.0",
    "hypothesis>=6.0.0",
    "coverage[toml]>=7.0.0"
]
dev = [
    { include-group = "test" },
    "ruff>=0.8.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0"
]

[tool.hatch.build.targets.wheel]
packages = ["dnastack"]

[tool.hatch.build.targets.sdist]
include = [
    "/dnastack",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml"
]
exclude = [
    "*.pyc",
    "__pycache__",
    ".git",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache"
]

[tool.uv]
package = true

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B024",  # abstract base class has no abstract methods
]
extend-exclude = [
    "__pycache__",
    "*.egg-info",
    "build",
    "dist",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
]

[tool.ruff.isort]
known-first-party = ["dnastack"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--capture=no",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["dnastack"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true